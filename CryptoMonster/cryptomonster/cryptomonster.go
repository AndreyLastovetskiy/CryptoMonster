// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package cryptomonster

import (
	"math/big"
	"strings"

	"github.com/FISCO-BCOS/go-sdk/abi"
	"github.com/FISCO-BCOS/go-sdk/abi/bind"
	"github.com/FISCO-BCOS/go-sdk/core/types"
	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/common"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
)

// CryptomonsterABI is the input ABI used to generate the binding from.
const CryptomonsterABI = "[{\"constant\":false,\"inputs\":[],\"name\":\"startPrivatePhase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"deleteUserInBlacklist\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserRole\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"addToBlacklist\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"username\",\"type\":\"string\"}],\"name\":\"getUserAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[3]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"password\",\"type\":\"string\"},{\"name\":\"secret\",\"type\":\"string\"}],\"name\":\"authorizateUser\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentPhase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrUser\",\"type\":\"address\"},{\"name\":\"usname\",\"type\":\"string\"},{\"name\":\"communication\",\"type\":\"string\"}],\"name\":\"buyPrivateToken\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"contact\",\"type\":\"string\"},{\"name\":\"passwordHash\",\"type\":\"bytes32\"},{\"name\":\"secretHash\",\"type\":\"bytes32\"}],\"name\":\"createUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopPrivatePhase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"changeTokenPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"deleteUserInWhitelist\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"name_\",\"type\":\"string\"},{\"name\":\"symbol_\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]"

// CryptomonsterBin is the compiled bytecode used for deploying new contracts.
var CryptomonsterBin = ""

// DeployCryptomonster deploys a new contract, binding an instance of Cryptomonster to it.
func DeployCryptomonster(auth *bind.TransactOpts, backend bind.ContractBackend, name_ string, symbol_ string) (common.Address, *types.Transaction, *Cryptomonster, error) {
	parsed, err := abi.JSON(strings.NewReader(CryptomonsterABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(CryptomonsterBin), backend, name_, symbol_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Cryptomonster{CryptomonsterCaller: CryptomonsterCaller{contract: contract}, CryptomonsterTransactor: CryptomonsterTransactor{contract: contract}, CryptomonsterFilterer: CryptomonsterFilterer{contract: contract}}, nil
}

func AsyncDeployCryptomonster(auth *bind.TransactOpts, handler func(*types.Receipt, error), backend bind.ContractBackend, name_ string, symbol_ string) (*types.Transaction, error) {
	parsed, err := abi.JSON(strings.NewReader(CryptomonsterABI))
	if err != nil {
		return nil, err
	}

	tx, err := bind.AsyncDeployContract(auth, handler, parsed, common.FromHex(CryptomonsterBin), backend, name_, symbol_)
	if err != nil {
		return nil, err
	}
	return tx, nil
}

// Cryptomonster is an auto generated Go binding around a Solidity contract.
type Cryptomonster struct {
	CryptomonsterCaller     // Read-only binding to the contract
	CryptomonsterTransactor // Write-only binding to the contract
	CryptomonsterFilterer   // Log filterer for contract events
}

// CryptomonsterCaller is an auto generated read-only Go binding around a Solidity contract.
type CryptomonsterCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CryptomonsterTransactor is an auto generated write-only Go binding around a Solidity contract.
type CryptomonsterTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CryptomonsterFilterer is an auto generated log filtering Go binding around a Solidity contract events.
type CryptomonsterFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CryptomonsterSession is an auto generated Go binding around a Solidity contract,
// with pre-set call and transact options.
type CryptomonsterSession struct {
	Contract     *Cryptomonster    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CryptomonsterCallerSession is an auto generated read-only Go binding around a Solidity contract,
// with pre-set call options.
type CryptomonsterCallerSession struct {
	Contract *CryptomonsterCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// CryptomonsterTransactorSession is an auto generated write-only Go binding around a Solidity contract,
// with pre-set transact options.
type CryptomonsterTransactorSession struct {
	Contract     *CryptomonsterTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// CryptomonsterRaw is an auto generated low-level Go binding around a Solidity contract.
type CryptomonsterRaw struct {
	Contract *Cryptomonster // Generic contract binding to access the raw methods on
}

// CryptomonsterCallerRaw is an auto generated low-level read-only Go binding around a Solidity contract.
type CryptomonsterCallerRaw struct {
	Contract *CryptomonsterCaller // Generic read-only contract binding to access the raw methods on
}

// CryptomonsterTransactorRaw is an auto generated low-level write-only Go binding around a Solidity contract.
type CryptomonsterTransactorRaw struct {
	Contract *CryptomonsterTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCryptomonster creates a new instance of Cryptomonster, bound to a specific deployed contract.
func NewCryptomonster(address common.Address, backend bind.ContractBackend) (*Cryptomonster, error) {
	contract, err := bindCryptomonster(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Cryptomonster{CryptomonsterCaller: CryptomonsterCaller{contract: contract}, CryptomonsterTransactor: CryptomonsterTransactor{contract: contract}, CryptomonsterFilterer: CryptomonsterFilterer{contract: contract}}, nil
}

// NewCryptomonsterCaller creates a new read-only instance of Cryptomonster, bound to a specific deployed contract.
func NewCryptomonsterCaller(address common.Address, caller bind.ContractCaller) (*CryptomonsterCaller, error) {
	contract, err := bindCryptomonster(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CryptomonsterCaller{contract: contract}, nil
}

// NewCryptomonsterTransactor creates a new write-only instance of Cryptomonster, bound to a specific deployed contract.
func NewCryptomonsterTransactor(address common.Address, transactor bind.ContractTransactor) (*CryptomonsterTransactor, error) {
	contract, err := bindCryptomonster(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CryptomonsterTransactor{contract: contract}, nil
}

// NewCryptomonsterFilterer creates a new log filterer instance of Cryptomonster, bound to a specific deployed contract.
func NewCryptomonsterFilterer(address common.Address, filterer bind.ContractFilterer) (*CryptomonsterFilterer, error) {
	contract, err := bindCryptomonster(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CryptomonsterFilterer{contract: contract}, nil
}

// bindCryptomonster binds a generic wrapper to an already deployed contract.
func bindCryptomonster(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(CryptomonsterABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Cryptomonster *CryptomonsterRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Cryptomonster.Contract.CryptomonsterCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Cryptomonster *CryptomonsterRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, *types.Receipt, error) {
	return _Cryptomonster.Contract.CryptomonsterTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Cryptomonster *CryptomonsterRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, *types.Receipt, error) {
	return _Cryptomonster.Contract.CryptomonsterTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Cryptomonster *CryptomonsterCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Cryptomonster.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Cryptomonster *CryptomonsterTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, *types.Receipt, error) {
	return _Cryptomonster.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Cryptomonster *CryptomonsterTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, *types.Receipt, error) {
	return _Cryptomonster.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) constant returns(uint256)
func (_Cryptomonster *CryptomonsterCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Cryptomonster.contract.Call(opts, out, "allowance", owner, spender)
	return *ret0, err
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) constant returns(uint256)
func (_Cryptomonster *CryptomonsterSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _Cryptomonster.Contract.Allowance(&_Cryptomonster.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) constant returns(uint256)
func (_Cryptomonster *CryptomonsterCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _Cryptomonster.Contract.Allowance(&_Cryptomonster.CallOpts, owner, spender)
}

// AuthorizateUser is a free data retrieval call binding the contract method 0xa1131959.
//
// Solidity: function authorizateUser(string username, string password, string secret) constant returns(bool success)
func (_Cryptomonster *CryptomonsterCaller) AuthorizateUser(opts *bind.CallOpts, username string, password string, secret string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Cryptomonster.contract.Call(opts, out, "authorizateUser", username, password, secret)
	return *ret0, err
}

// AuthorizateUser is a free data retrieval call binding the contract method 0xa1131959.
//
// Solidity: function authorizateUser(string username, string password, string secret) constant returns(bool success)
func (_Cryptomonster *CryptomonsterSession) AuthorizateUser(username string, password string, secret string) (bool, error) {
	return _Cryptomonster.Contract.AuthorizateUser(&_Cryptomonster.CallOpts, username, password, secret)
}

// AuthorizateUser is a free data retrieval call binding the contract method 0xa1131959.
//
// Solidity: function authorizateUser(string username, string password, string secret) constant returns(bool success)
func (_Cryptomonster *CryptomonsterCallerSession) AuthorizateUser(username string, password string, secret string) (bool, error) {
	return _Cryptomonster.Contract.AuthorizateUser(&_Cryptomonster.CallOpts, username, password, secret)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) constant returns(uint256[3])
func (_Cryptomonster *CryptomonsterCaller) BalanceOf(opts *bind.CallOpts, account common.Address) ([3]*big.Int, error) {
	var (
		ret0 = new([3]*big.Int)
	)
	out := ret0
	err := _Cryptomonster.contract.Call(opts, out, "balanceOf", account)
	return *ret0, err
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) constant returns(uint256[3])
func (_Cryptomonster *CryptomonsterSession) BalanceOf(account common.Address) ([3]*big.Int, error) {
	return _Cryptomonster.Contract.BalanceOf(&_Cryptomonster.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) constant returns(uint256[3])
func (_Cryptomonster *CryptomonsterCallerSession) BalanceOf(account common.Address) ([3]*big.Int, error) {
	return _Cryptomonster.Contract.BalanceOf(&_Cryptomonster.CallOpts, account)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() constant returns(uint8)
func (_Cryptomonster *CryptomonsterCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Cryptomonster.contract.Call(opts, out, "decimals")
	return *ret0, err
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() constant returns(uint8)
func (_Cryptomonster *CryptomonsterSession) Decimals() (uint8, error) {
	return _Cryptomonster.Contract.Decimals(&_Cryptomonster.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() constant returns(uint8)
func (_Cryptomonster *CryptomonsterCallerSession) Decimals() (uint8, error) {
	return _Cryptomonster.Contract.Decimals(&_Cryptomonster.CallOpts)
}

// GetCurrentPhase is a free data retrieval call binding the contract method 0xa3a40ea5.
//
// Solidity: function getCurrentPhase() constant returns(uint8)
func (_Cryptomonster *CryptomonsterCaller) GetCurrentPhase(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Cryptomonster.contract.Call(opts, out, "getCurrentPhase")
	return *ret0, err
}

// GetCurrentPhase is a free data retrieval call binding the contract method 0xa3a40ea5.
//
// Solidity: function getCurrentPhase() constant returns(uint8)
func (_Cryptomonster *CryptomonsterSession) GetCurrentPhase() (uint8, error) {
	return _Cryptomonster.Contract.GetCurrentPhase(&_Cryptomonster.CallOpts)
}

// GetCurrentPhase is a free data retrieval call binding the contract method 0xa3a40ea5.
//
// Solidity: function getCurrentPhase() constant returns(uint8)
func (_Cryptomonster *CryptomonsterCallerSession) GetCurrentPhase() (uint8, error) {
	return _Cryptomonster.Contract.GetCurrentPhase(&_Cryptomonster.CallOpts)
}

// GetUserAddress is a free data retrieval call binding the contract method 0x4985e85c.
//
// Solidity: function getUserAddress(string username) constant returns(address)
func (_Cryptomonster *CryptomonsterCaller) GetUserAddress(opts *bind.CallOpts, username string) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Cryptomonster.contract.Call(opts, out, "getUserAddress", username)
	return *ret0, err
}

// GetUserAddress is a free data retrieval call binding the contract method 0x4985e85c.
//
// Solidity: function getUserAddress(string username) constant returns(address)
func (_Cryptomonster *CryptomonsterSession) GetUserAddress(username string) (common.Address, error) {
	return _Cryptomonster.Contract.GetUserAddress(&_Cryptomonster.CallOpts, username)
}

// GetUserAddress is a free data retrieval call binding the contract method 0x4985e85c.
//
// Solidity: function getUserAddress(string username) constant returns(address)
func (_Cryptomonster *CryptomonsterCallerSession) GetUserAddress(username string) (common.Address, error) {
	return _Cryptomonster.Contract.GetUserAddress(&_Cryptomonster.CallOpts, username)
}

// GetUserRole is a free data retrieval call binding the contract method 0x27820851.
//
// Solidity: function getUserRole(address user) constant returns(uint8)
func (_Cryptomonster *CryptomonsterCaller) GetUserRole(opts *bind.CallOpts, user common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Cryptomonster.contract.Call(opts, out, "getUserRole", user)
	return *ret0, err
}

// GetUserRole is a free data retrieval call binding the contract method 0x27820851.
//
// Solidity: function getUserRole(address user) constant returns(uint8)
func (_Cryptomonster *CryptomonsterSession) GetUserRole(user common.Address) (uint8, error) {
	return _Cryptomonster.Contract.GetUserRole(&_Cryptomonster.CallOpts, user)
}

// GetUserRole is a free data retrieval call binding the contract method 0x27820851.
//
// Solidity: function getUserRole(address user) constant returns(uint8)
func (_Cryptomonster *CryptomonsterCallerSession) GetUserRole(user common.Address) (uint8, error) {
	return _Cryptomonster.Contract.GetUserRole(&_Cryptomonster.CallOpts, user)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_Cryptomonster *CryptomonsterCaller) Name(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Cryptomonster.contract.Call(opts, out, "name")
	return *ret0, err
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_Cryptomonster *CryptomonsterSession) Name() (string, error) {
	return _Cryptomonster.Contract.Name(&_Cryptomonster.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_Cryptomonster *CryptomonsterCallerSession) Name() (string, error) {
	return _Cryptomonster.Contract.Name(&_Cryptomonster.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() constant returns(string)
func (_Cryptomonster *CryptomonsterCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Cryptomonster.contract.Call(opts, out, "symbol")
	return *ret0, err
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() constant returns(string)
func (_Cryptomonster *CryptomonsterSession) Symbol() (string, error) {
	return _Cryptomonster.Contract.Symbol(&_Cryptomonster.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() constant returns(string)
func (_Cryptomonster *CryptomonsterCallerSession) Symbol() (string, error) {
	return _Cryptomonster.Contract.Symbol(&_Cryptomonster.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() constant returns(uint256)
func (_Cryptomonster *CryptomonsterCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Cryptomonster.contract.Call(opts, out, "totalSupply")
	return *ret0, err
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() constant returns(uint256)
func (_Cryptomonster *CryptomonsterSession) TotalSupply() (*big.Int, error) {
	return _Cryptomonster.Contract.TotalSupply(&_Cryptomonster.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() constant returns(uint256)
func (_Cryptomonster *CryptomonsterCallerSession) TotalSupply() (*big.Int, error) {
	return _Cryptomonster.Contract.TotalSupply(&_Cryptomonster.CallOpts)
}

// AddToBlacklist is a paid mutator transaction binding the contract method 0x44337ea1.
//
// Solidity: function addToBlacklist(address sender) returns(bool success)
func (_Cryptomonster *CryptomonsterTransactor) AddToBlacklist(opts *bind.TransactOpts, sender common.Address) (*types.Transaction, *types.Receipt, error) {
	return _Cryptomonster.contract.Transact(opts, "addToBlacklist", sender)
}

func (_Cryptomonster *CryptomonsterTransactor) AsyncAddToBlacklist(handler func(*types.Receipt, error), opts *bind.TransactOpts, sender common.Address) (*types.Transaction, error) {
	return _Cryptomonster.contract.AsyncTransact(opts, handler, "addToBlacklist", sender)
}

// AddToBlacklist is a paid mutator transaction binding the contract method 0x44337ea1.
//
// Solidity: function addToBlacklist(address sender) returns(bool success)
func (_Cryptomonster *CryptomonsterSession) AddToBlacklist(sender common.Address) (*types.Transaction, *types.Receipt, error) {
	return _Cryptomonster.Contract.AddToBlacklist(&_Cryptomonster.TransactOpts, sender)
}

func (_Cryptomonster *CryptomonsterSession) AsyncAddToBlacklist(handler func(*types.Receipt, error), sender common.Address) (*types.Transaction, error) {
	return _Cryptomonster.Contract.AsyncAddToBlacklist(handler, &_Cryptomonster.TransactOpts, sender)
}

// AddToBlacklist is a paid mutator transaction binding the contract method 0x44337ea1.
//
// Solidity: function addToBlacklist(address sender) returns(bool success)
func (_Cryptomonster *CryptomonsterTransactorSession) AddToBlacklist(sender common.Address) (*types.Transaction, *types.Receipt, error) {
	return _Cryptomonster.Contract.AddToBlacklist(&_Cryptomonster.TransactOpts, sender)
}

func (_Cryptomonster *CryptomonsterTransactorSession) AsyncAddToBlacklist(handler func(*types.Receipt, error), sender common.Address) (*types.Transaction, error) {
	return _Cryptomonster.Contract.AsyncAddToBlacklist(handler, &_Cryptomonster.TransactOpts, sender)
}

// AddToWhitelist is a paid mutator transaction binding the contract method 0xe43252d7.
//
// Solidity: function addToWhitelist(address sender) returns(bool success)
func (_Cryptomonster *CryptomonsterTransactor) AddToWhitelist(opts *bind.TransactOpts, sender common.Address) (*types.Transaction, *types.Receipt, error) {
	return _Cryptomonster.contract.Transact(opts, "addToWhitelist", sender)
}

func (_Cryptomonster *CryptomonsterTransactor) AsyncAddToWhitelist(handler func(*types.Receipt, error), opts *bind.TransactOpts, sender common.Address) (*types.Transaction, error) {
	return _Cryptomonster.contract.AsyncTransact(opts, handler, "addToWhitelist", sender)
}

// AddToWhitelist is a paid mutator transaction binding the contract method 0xe43252d7.
//
// Solidity: function addToWhitelist(address sender) returns(bool success)
func (_Cryptomonster *CryptomonsterSession) AddToWhitelist(sender common.Address) (*types.Transaction, *types.Receipt, error) {
	return _Cryptomonster.Contract.AddToWhitelist(&_Cryptomonster.TransactOpts, sender)
}

func (_Cryptomonster *CryptomonsterSession) AsyncAddToWhitelist(handler func(*types.Receipt, error), sender common.Address) (*types.Transaction, error) {
	return _Cryptomonster.Contract.AsyncAddToWhitelist(handler, &_Cryptomonster.TransactOpts, sender)
}

// AddToWhitelist is a paid mutator transaction binding the contract method 0xe43252d7.
//
// Solidity: function addToWhitelist(address sender) returns(bool success)
func (_Cryptomonster *CryptomonsterTransactorSession) AddToWhitelist(sender common.Address) (*types.Transaction, *types.Receipt, error) {
	return _Cryptomonster.Contract.AddToWhitelist(&_Cryptomonster.TransactOpts, sender)
}

func (_Cryptomonster *CryptomonsterTransactorSession) AsyncAddToWhitelist(handler func(*types.Receipt, error), sender common.Address) (*types.Transaction, error) {
	return _Cryptomonster.Contract.AsyncAddToWhitelist(handler, &_Cryptomonster.TransactOpts, sender)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Cryptomonster *CryptomonsterTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Cryptomonster.contract.Transact(opts, "approve", spender, amount)
}

func (_Cryptomonster *CryptomonsterTransactor) AsyncApprove(handler func(*types.Receipt, error), opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Cryptomonster.contract.AsyncTransact(opts, handler, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Cryptomonster *CryptomonsterSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Cryptomonster.Contract.Approve(&_Cryptomonster.TransactOpts, spender, amount)
}

func (_Cryptomonster *CryptomonsterSession) AsyncApprove(handler func(*types.Receipt, error), spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Cryptomonster.Contract.AsyncApprove(handler, &_Cryptomonster.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Cryptomonster *CryptomonsterTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Cryptomonster.Contract.Approve(&_Cryptomonster.TransactOpts, spender, amount)
}

func (_Cryptomonster *CryptomonsterTransactorSession) AsyncApprove(handler func(*types.Receipt, error), spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Cryptomonster.Contract.AsyncApprove(handler, &_Cryptomonster.TransactOpts, spender, amount)
}

// Buy is a paid mutator transaction binding the contract method 0xd96a094a.
//
// Solidity: function buy(uint256 amount) returns()
func (_Cryptomonster *CryptomonsterTransactor) Buy(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Cryptomonster.contract.Transact(opts, "buy", amount)
}

func (_Cryptomonster *CryptomonsterTransactor) AsyncBuy(handler func(*types.Receipt, error), opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Cryptomonster.contract.AsyncTransact(opts, handler, "buy", amount)
}

// Buy is a paid mutator transaction binding the contract method 0xd96a094a.
//
// Solidity: function buy(uint256 amount) returns()
func (_Cryptomonster *CryptomonsterSession) Buy(amount *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Cryptomonster.Contract.Buy(&_Cryptomonster.TransactOpts, amount)
}

func (_Cryptomonster *CryptomonsterSession) AsyncBuy(handler func(*types.Receipt, error), amount *big.Int) (*types.Transaction, error) {
	return _Cryptomonster.Contract.AsyncBuy(handler, &_Cryptomonster.TransactOpts, amount)
}

// Buy is a paid mutator transaction binding the contract method 0xd96a094a.
//
// Solidity: function buy(uint256 amount) returns()
func (_Cryptomonster *CryptomonsterTransactorSession) Buy(amount *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Cryptomonster.Contract.Buy(&_Cryptomonster.TransactOpts, amount)
}

func (_Cryptomonster *CryptomonsterTransactorSession) AsyncBuy(handler func(*types.Receipt, error), amount *big.Int) (*types.Transaction, error) {
	return _Cryptomonster.Contract.AsyncBuy(handler, &_Cryptomonster.TransactOpts, amount)
}

// BuyPrivateToken is a paid mutator transaction binding the contract method 0xaa23ee7e.
//
// Solidity: function buyPrivateToken(address addrUser, string usname, string communication) returns(bool success)
func (_Cryptomonster *CryptomonsterTransactor) BuyPrivateToken(opts *bind.TransactOpts, addrUser common.Address, usname string, communication string) (*types.Transaction, *types.Receipt, error) {
	return _Cryptomonster.contract.Transact(opts, "buyPrivateToken", addrUser, usname, communication)
}

func (_Cryptomonster *CryptomonsterTransactor) AsyncBuyPrivateToken(handler func(*types.Receipt, error), opts *bind.TransactOpts, addrUser common.Address, usname string, communication string) (*types.Transaction, error) {
	return _Cryptomonster.contract.AsyncTransact(opts, handler, "buyPrivateToken", addrUser, usname, communication)
}

// BuyPrivateToken is a paid mutator transaction binding the contract method 0xaa23ee7e.
//
// Solidity: function buyPrivateToken(address addrUser, string usname, string communication) returns(bool success)
func (_Cryptomonster *CryptomonsterSession) BuyPrivateToken(addrUser common.Address, usname string, communication string) (*types.Transaction, *types.Receipt, error) {
	return _Cryptomonster.Contract.BuyPrivateToken(&_Cryptomonster.TransactOpts, addrUser, usname, communication)
}

func (_Cryptomonster *CryptomonsterSession) AsyncBuyPrivateToken(handler func(*types.Receipt, error), addrUser common.Address, usname string, communication string) (*types.Transaction, error) {
	return _Cryptomonster.Contract.AsyncBuyPrivateToken(handler, &_Cryptomonster.TransactOpts, addrUser, usname, communication)
}

// BuyPrivateToken is a paid mutator transaction binding the contract method 0xaa23ee7e.
//
// Solidity: function buyPrivateToken(address addrUser, string usname, string communication) returns(bool success)
func (_Cryptomonster *CryptomonsterTransactorSession) BuyPrivateToken(addrUser common.Address, usname string, communication string) (*types.Transaction, *types.Receipt, error) {
	return _Cryptomonster.Contract.BuyPrivateToken(&_Cryptomonster.TransactOpts, addrUser, usname, communication)
}

func (_Cryptomonster *CryptomonsterTransactorSession) AsyncBuyPrivateToken(handler func(*types.Receipt, error), addrUser common.Address, usname string, communication string) (*types.Transaction, error) {
	return _Cryptomonster.Contract.AsyncBuyPrivateToken(handler, &_Cryptomonster.TransactOpts, addrUser, usname, communication)
}

// ChangeTokenPrice is a paid mutator transaction binding the contract method 0xfbc94f24.
//
// Solidity: function changeTokenPrice(uint256 newPrice) returns()
func (_Cryptomonster *CryptomonsterTransactor) ChangeTokenPrice(opts *bind.TransactOpts, newPrice *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Cryptomonster.contract.Transact(opts, "changeTokenPrice", newPrice)
}

func (_Cryptomonster *CryptomonsterTransactor) AsyncChangeTokenPrice(handler func(*types.Receipt, error), opts *bind.TransactOpts, newPrice *big.Int) (*types.Transaction, error) {
	return _Cryptomonster.contract.AsyncTransact(opts, handler, "changeTokenPrice", newPrice)
}

// ChangeTokenPrice is a paid mutator transaction binding the contract method 0xfbc94f24.
//
// Solidity: function changeTokenPrice(uint256 newPrice) returns()
func (_Cryptomonster *CryptomonsterSession) ChangeTokenPrice(newPrice *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Cryptomonster.Contract.ChangeTokenPrice(&_Cryptomonster.TransactOpts, newPrice)
}

func (_Cryptomonster *CryptomonsterSession) AsyncChangeTokenPrice(handler func(*types.Receipt, error), newPrice *big.Int) (*types.Transaction, error) {
	return _Cryptomonster.Contract.AsyncChangeTokenPrice(handler, &_Cryptomonster.TransactOpts, newPrice)
}

// ChangeTokenPrice is a paid mutator transaction binding the contract method 0xfbc94f24.
//
// Solidity: function changeTokenPrice(uint256 newPrice) returns()
func (_Cryptomonster *CryptomonsterTransactorSession) ChangeTokenPrice(newPrice *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Cryptomonster.Contract.ChangeTokenPrice(&_Cryptomonster.TransactOpts, newPrice)
}

func (_Cryptomonster *CryptomonsterTransactorSession) AsyncChangeTokenPrice(handler func(*types.Receipt, error), newPrice *big.Int) (*types.Transaction, error) {
	return _Cryptomonster.Contract.AsyncChangeTokenPrice(handler, &_Cryptomonster.TransactOpts, newPrice)
}

// CreateUser is a paid mutator transaction binding the contract method 0xc4a51a24.
//
// Solidity: function createUser(address addr, string username, string contact, bytes32 passwordHash, bytes32 secretHash) returns()
func (_Cryptomonster *CryptomonsterTransactor) CreateUser(opts *bind.TransactOpts, addr common.Address, username string, contact string, passwordHash [32]byte, secretHash [32]byte) (*types.Transaction, *types.Receipt, error) {
	return _Cryptomonster.contract.Transact(opts, "createUser", addr, username, contact, passwordHash, secretHash)
}

func (_Cryptomonster *CryptomonsterTransactor) AsyncCreateUser(handler func(*types.Receipt, error), opts *bind.TransactOpts, addr common.Address, username string, contact string, passwordHash [32]byte, secretHash [32]byte) (*types.Transaction, error) {
	return _Cryptomonster.contract.AsyncTransact(opts, handler, "createUser", addr, username, contact, passwordHash, secretHash)
}

// CreateUser is a paid mutator transaction binding the contract method 0xc4a51a24.
//
// Solidity: function createUser(address addr, string username, string contact, bytes32 passwordHash, bytes32 secretHash) returns()
func (_Cryptomonster *CryptomonsterSession) CreateUser(addr common.Address, username string, contact string, passwordHash [32]byte, secretHash [32]byte) (*types.Transaction, *types.Receipt, error) {
	return _Cryptomonster.Contract.CreateUser(&_Cryptomonster.TransactOpts, addr, username, contact, passwordHash, secretHash)
}

func (_Cryptomonster *CryptomonsterSession) AsyncCreateUser(handler func(*types.Receipt, error), addr common.Address, username string, contact string, passwordHash [32]byte, secretHash [32]byte) (*types.Transaction, error) {
	return _Cryptomonster.Contract.AsyncCreateUser(handler, &_Cryptomonster.TransactOpts, addr, username, contact, passwordHash, secretHash)
}

// CreateUser is a paid mutator transaction binding the contract method 0xc4a51a24.
//
// Solidity: function createUser(address addr, string username, string contact, bytes32 passwordHash, bytes32 secretHash) returns()
func (_Cryptomonster *CryptomonsterTransactorSession) CreateUser(addr common.Address, username string, contact string, passwordHash [32]byte, secretHash [32]byte) (*types.Transaction, *types.Receipt, error) {
	return _Cryptomonster.Contract.CreateUser(&_Cryptomonster.TransactOpts, addr, username, contact, passwordHash, secretHash)
}

func (_Cryptomonster *CryptomonsterTransactorSession) AsyncCreateUser(handler func(*types.Receipt, error), addr common.Address, username string, contact string, passwordHash [32]byte, secretHash [32]byte) (*types.Transaction, error) {
	return _Cryptomonster.Contract.AsyncCreateUser(handler, &_Cryptomonster.TransactOpts, addr, username, contact, passwordHash, secretHash)
}

// DeleteUserInBlacklist is a paid mutator transaction binding the contract method 0x0f6809b8.
//
// Solidity: function deleteUserInBlacklist(address sender) returns(bool success)
func (_Cryptomonster *CryptomonsterTransactor) DeleteUserInBlacklist(opts *bind.TransactOpts, sender common.Address) (*types.Transaction, *types.Receipt, error) {
	return _Cryptomonster.contract.Transact(opts, "deleteUserInBlacklist", sender)
}

func (_Cryptomonster *CryptomonsterTransactor) AsyncDeleteUserInBlacklist(handler func(*types.Receipt, error), opts *bind.TransactOpts, sender common.Address) (*types.Transaction, error) {
	return _Cryptomonster.contract.AsyncTransact(opts, handler, "deleteUserInBlacklist", sender)
}

// DeleteUserInBlacklist is a paid mutator transaction binding the contract method 0x0f6809b8.
//
// Solidity: function deleteUserInBlacklist(address sender) returns(bool success)
func (_Cryptomonster *CryptomonsterSession) DeleteUserInBlacklist(sender common.Address) (*types.Transaction, *types.Receipt, error) {
	return _Cryptomonster.Contract.DeleteUserInBlacklist(&_Cryptomonster.TransactOpts, sender)
}

func (_Cryptomonster *CryptomonsterSession) AsyncDeleteUserInBlacklist(handler func(*types.Receipt, error), sender common.Address) (*types.Transaction, error) {
	return _Cryptomonster.Contract.AsyncDeleteUserInBlacklist(handler, &_Cryptomonster.TransactOpts, sender)
}

// DeleteUserInBlacklist is a paid mutator transaction binding the contract method 0x0f6809b8.
//
// Solidity: function deleteUserInBlacklist(address sender) returns(bool success)
func (_Cryptomonster *CryptomonsterTransactorSession) DeleteUserInBlacklist(sender common.Address) (*types.Transaction, *types.Receipt, error) {
	return _Cryptomonster.Contract.DeleteUserInBlacklist(&_Cryptomonster.TransactOpts, sender)
}

func (_Cryptomonster *CryptomonsterTransactorSession) AsyncDeleteUserInBlacklist(handler func(*types.Receipt, error), sender common.Address) (*types.Transaction, error) {
	return _Cryptomonster.Contract.AsyncDeleteUserInBlacklist(handler, &_Cryptomonster.TransactOpts, sender)
}

// DeleteUserInWhitelist is a paid mutator transaction binding the contract method 0xfd65920d.
//
// Solidity: function deleteUserInWhitelist(address sender) returns(bool success)
func (_Cryptomonster *CryptomonsterTransactor) DeleteUserInWhitelist(opts *bind.TransactOpts, sender common.Address) (*types.Transaction, *types.Receipt, error) {
	return _Cryptomonster.contract.Transact(opts, "deleteUserInWhitelist", sender)
}

func (_Cryptomonster *CryptomonsterTransactor) AsyncDeleteUserInWhitelist(handler func(*types.Receipt, error), opts *bind.TransactOpts, sender common.Address) (*types.Transaction, error) {
	return _Cryptomonster.contract.AsyncTransact(opts, handler, "deleteUserInWhitelist", sender)
}

// DeleteUserInWhitelist is a paid mutator transaction binding the contract method 0xfd65920d.
//
// Solidity: function deleteUserInWhitelist(address sender) returns(bool success)
func (_Cryptomonster *CryptomonsterSession) DeleteUserInWhitelist(sender common.Address) (*types.Transaction, *types.Receipt, error) {
	return _Cryptomonster.Contract.DeleteUserInWhitelist(&_Cryptomonster.TransactOpts, sender)
}

func (_Cryptomonster *CryptomonsterSession) AsyncDeleteUserInWhitelist(handler func(*types.Receipt, error), sender common.Address) (*types.Transaction, error) {
	return _Cryptomonster.Contract.AsyncDeleteUserInWhitelist(handler, &_Cryptomonster.TransactOpts, sender)
}

// DeleteUserInWhitelist is a paid mutator transaction binding the contract method 0xfd65920d.
//
// Solidity: function deleteUserInWhitelist(address sender) returns(bool success)
func (_Cryptomonster *CryptomonsterTransactorSession) DeleteUserInWhitelist(sender common.Address) (*types.Transaction, *types.Receipt, error) {
	return _Cryptomonster.Contract.DeleteUserInWhitelist(&_Cryptomonster.TransactOpts, sender)
}

func (_Cryptomonster *CryptomonsterTransactorSession) AsyncDeleteUserInWhitelist(handler func(*types.Receipt, error), sender common.Address) (*types.Transaction, error) {
	return _Cryptomonster.Contract.AsyncDeleteUserInWhitelist(handler, &_Cryptomonster.TransactOpts, sender)
}

// StartPrivatePhase is a paid mutator transaction binding the contract method 0x0691615d.
//
// Solidity: function startPrivatePhase() returns()
func (_Cryptomonster *CryptomonsterTransactor) StartPrivatePhase(opts *bind.TransactOpts) (*types.Transaction, *types.Receipt, error) {
	return _Cryptomonster.contract.Transact(opts, "startPrivatePhase")
}

func (_Cryptomonster *CryptomonsterTransactor) AsyncStartPrivatePhase(handler func(*types.Receipt, error), opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Cryptomonster.contract.AsyncTransact(opts, handler, "startPrivatePhase")
}

// StartPrivatePhase is a paid mutator transaction binding the contract method 0x0691615d.
//
// Solidity: function startPrivatePhase() returns()
func (_Cryptomonster *CryptomonsterSession) StartPrivatePhase() (*types.Transaction, *types.Receipt, error) {
	return _Cryptomonster.Contract.StartPrivatePhase(&_Cryptomonster.TransactOpts)
}

func (_Cryptomonster *CryptomonsterSession) AsyncStartPrivatePhase(handler func(*types.Receipt, error)) (*types.Transaction, error) {
	return _Cryptomonster.Contract.AsyncStartPrivatePhase(handler, &_Cryptomonster.TransactOpts)
}

// StartPrivatePhase is a paid mutator transaction binding the contract method 0x0691615d.
//
// Solidity: function startPrivatePhase() returns()
func (_Cryptomonster *CryptomonsterTransactorSession) StartPrivatePhase() (*types.Transaction, *types.Receipt, error) {
	return _Cryptomonster.Contract.StartPrivatePhase(&_Cryptomonster.TransactOpts)
}

func (_Cryptomonster *CryptomonsterTransactorSession) AsyncStartPrivatePhase(handler func(*types.Receipt, error)) (*types.Transaction, error) {
	return _Cryptomonster.Contract.AsyncStartPrivatePhase(handler, &_Cryptomonster.TransactOpts)
}

// StopPrivatePhase is a paid mutator transaction binding the contract method 0xc55b41e1.
//
// Solidity: function stopPrivatePhase() returns()
func (_Cryptomonster *CryptomonsterTransactor) StopPrivatePhase(opts *bind.TransactOpts) (*types.Transaction, *types.Receipt, error) {
	return _Cryptomonster.contract.Transact(opts, "stopPrivatePhase")
}

func (_Cryptomonster *CryptomonsterTransactor) AsyncStopPrivatePhase(handler func(*types.Receipt, error), opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Cryptomonster.contract.AsyncTransact(opts, handler, "stopPrivatePhase")
}

// StopPrivatePhase is a paid mutator transaction binding the contract method 0xc55b41e1.
//
// Solidity: function stopPrivatePhase() returns()
func (_Cryptomonster *CryptomonsterSession) StopPrivatePhase() (*types.Transaction, *types.Receipt, error) {
	return _Cryptomonster.Contract.StopPrivatePhase(&_Cryptomonster.TransactOpts)
}

func (_Cryptomonster *CryptomonsterSession) AsyncStopPrivatePhase(handler func(*types.Receipt, error)) (*types.Transaction, error) {
	return _Cryptomonster.Contract.AsyncStopPrivatePhase(handler, &_Cryptomonster.TransactOpts)
}

// StopPrivatePhase is a paid mutator transaction binding the contract method 0xc55b41e1.
//
// Solidity: function stopPrivatePhase() returns()
func (_Cryptomonster *CryptomonsterTransactorSession) StopPrivatePhase() (*types.Transaction, *types.Receipt, error) {
	return _Cryptomonster.Contract.StopPrivatePhase(&_Cryptomonster.TransactOpts)
}

func (_Cryptomonster *CryptomonsterTransactorSession) AsyncStopPrivatePhase(handler func(*types.Receipt, error)) (*types.Transaction, error) {
	return _Cryptomonster.Contract.AsyncStopPrivatePhase(handler, &_Cryptomonster.TransactOpts)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_Cryptomonster *CryptomonsterTransactor) Transfer(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Cryptomonster.contract.Transact(opts, "transfer", to, amount)
}

func (_Cryptomonster *CryptomonsterTransactor) AsyncTransfer(handler func(*types.Receipt, error), opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Cryptomonster.contract.AsyncTransact(opts, handler, "transfer", to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_Cryptomonster *CryptomonsterSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Cryptomonster.Contract.Transfer(&_Cryptomonster.TransactOpts, to, amount)
}

func (_Cryptomonster *CryptomonsterSession) AsyncTransfer(handler func(*types.Receipt, error), to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Cryptomonster.Contract.AsyncTransfer(handler, &_Cryptomonster.TransactOpts, to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_Cryptomonster *CryptomonsterTransactorSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Cryptomonster.Contract.Transfer(&_Cryptomonster.TransactOpts, to, amount)
}

func (_Cryptomonster *CryptomonsterTransactorSession) AsyncTransfer(handler func(*types.Receipt, error), to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Cryptomonster.Contract.AsyncTransfer(handler, &_Cryptomonster.TransactOpts, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_Cryptomonster *CryptomonsterTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, amount *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Cryptomonster.contract.Transact(opts, "transferFrom", from, to, amount)
}

func (_Cryptomonster *CryptomonsterTransactor) AsyncTransferFrom(handler func(*types.Receipt, error), opts *bind.TransactOpts, from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Cryptomonster.contract.AsyncTransact(opts, handler, "transferFrom", from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_Cryptomonster *CryptomonsterSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Cryptomonster.Contract.TransferFrom(&_Cryptomonster.TransactOpts, from, to, amount)
}

func (_Cryptomonster *CryptomonsterSession) AsyncTransferFrom(handler func(*types.Receipt, error), from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Cryptomonster.Contract.AsyncTransferFrom(handler, &_Cryptomonster.TransactOpts, from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_Cryptomonster *CryptomonsterTransactorSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Cryptomonster.Contract.TransferFrom(&_Cryptomonster.TransactOpts, from, to, amount)
}

func (_Cryptomonster *CryptomonsterTransactorSession) AsyncTransferFrom(handler func(*types.Receipt, error), from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Cryptomonster.Contract.AsyncTransferFrom(handler, &_Cryptomonster.TransactOpts, from, to, amount)
}

// CryptomonsterApproval represents a Approval event raised by the Cryptomonster contract.
type CryptomonsterApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed _owner, address indexed _spender, uint256 _value)
func (_Cryptomonster *CryptomonsterFilterer) WatchApproval(fromBlock *uint64, handler func(int, []types.Log), _owner common.Address, _spender common.Address) error {
	return _Cryptomonster.contract.WatchLogs(fromBlock, handler, "Approval", _owner, _spender)
}

func (_Cryptomonster *CryptomonsterFilterer) WatchAllApproval(fromBlock *uint64, handler func(int, []types.Log)) error {
	return _Cryptomonster.contract.WatchLogs(fromBlock, handler, "Approval")
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed _owner, address indexed _spender, uint256 _value)
func (_Cryptomonster *CryptomonsterFilterer) ParseApproval(log types.Log) (*CryptomonsterApproval, error) {
	event := new(CryptomonsterApproval)
	if err := _Cryptomonster.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	return event, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed _owner, address indexed _spender, uint256 _value)
func (_Cryptomonster *CryptomonsterSession) WatchApproval(fromBlock *uint64, handler func(int, []types.Log), _owner common.Address, _spender common.Address) error {
	return _Cryptomonster.Contract.WatchApproval(fromBlock, handler, _owner, _spender)
}

func (_Cryptomonster *CryptomonsterSession) WatchAllApproval(fromBlock *uint64, handler func(int, []types.Log)) error {
	return _Cryptomonster.Contract.WatchAllApproval(fromBlock, handler)
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed _owner, address indexed _spender, uint256 _value)
func (_Cryptomonster *CryptomonsterSession) ParseApproval(log types.Log) (*CryptomonsterApproval, error) {
	return _Cryptomonster.Contract.ParseApproval(log)
}

// CryptomonsterTransfer represents a Transfer event raised by the Cryptomonster contract.
type CryptomonsterTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed _from, address indexed _to, uint256 _value)
func (_Cryptomonster *CryptomonsterFilterer) WatchTransfer(fromBlock *uint64, handler func(int, []types.Log), _from common.Address, _to common.Address) error {
	return _Cryptomonster.contract.WatchLogs(fromBlock, handler, "Transfer", _from, _to)
}

func (_Cryptomonster *CryptomonsterFilterer) WatchAllTransfer(fromBlock *uint64, handler func(int, []types.Log)) error {
	return _Cryptomonster.contract.WatchLogs(fromBlock, handler, "Transfer")
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed _from, address indexed _to, uint256 _value)
func (_Cryptomonster *CryptomonsterFilterer) ParseTransfer(log types.Log) (*CryptomonsterTransfer, error) {
	event := new(CryptomonsterTransfer)
	if err := _Cryptomonster.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	return event, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed _from, address indexed _to, uint256 _value)
func (_Cryptomonster *CryptomonsterSession) WatchTransfer(fromBlock *uint64, handler func(int, []types.Log), _from common.Address, _to common.Address) error {
	return _Cryptomonster.Contract.WatchTransfer(fromBlock, handler, _from, _to)
}

func (_Cryptomonster *CryptomonsterSession) WatchAllTransfer(fromBlock *uint64, handler func(int, []types.Log)) error {
	return _Cryptomonster.Contract.WatchAllTransfer(fromBlock, handler)
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed _from, address indexed _to, uint256 _value)
func (_Cryptomonster *CryptomonsterSession) ParseTransfer(log types.Log) (*CryptomonsterTransfer, error) {
	return _Cryptomonster.Contract.ParseTransfer(log)
}